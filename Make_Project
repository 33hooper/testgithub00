# packages used or needed for this project
import math
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
import plotly.graph_objs as go
import plotly 
from collections import OrderedDict
# here i am using the plotly API to import capability of making interactive plots
plotly.tools.set_credentials_file(username='33hooper', api_key='UwmmblIUP0njMdQYhj5W')


# soruce: https://datatofish.com/read_excel/
# to import Excel files
import tkinter as tk
from tkinter import filedialog
import pandas as pd

root= tk.Tk()

canvas1 = tk.Canvas(root, width = 300, height = 300, bg = 'lightsteelblue')
canvas1.pack()

def getExcel ():
    global df
    
    import_file_path = filedialog.askopenfilename()
    df = pd.read_excel (import_file_path)
    print (df)
    
browseButton_Excel = tk.Button(text='Import Excel File', command=getExcel, bg='green', fg='white', font=('helvetica', 12, 'bold'))
canvas1.create_window(150, 150, window=browseButton_Excel)

root.mainloop()
# excel file now is df in python


# use head() function to get a quick view of the dataset
df.head()
# or I can use indexing [rows: columns]
df.iloc[0:5,0:9]

# to extract only the two columns and drop NaN values
df[["Altitude (ft)", "Aircraft address"]].dropna()

# save that to a new dataframe
df1 = df[["Altitude (ft)", "Aircraft address"]].dropna()

# show the most common Altitudes using panda plot function
df1['Altitude (ft)'].plot(kind= "hist") # this is a test run

# find the average Altitude of registered flights passing through Atlanta Metro-Area
df1['Altitude (ft)'].mean()

# take out negative values for Altittude (probably wrong outputs received)
alt_filter = df1['Altitude (ft)'] > 0
df1 = df1[alt_filter]

# make different Altitude Level, increment of 5000 ft
# 0 - 5000
alt_filter_5000 = df1['Altitude (ft)'] <= 5000
one_inc = df1[alt_filter_5000]
one_inc_avg = one_inc['Altitude (ft)'].mean() # find the average Altitude for this level
one_inc_count = len(one_inc["Aircraft address"].unique()) # find the number of airplanes are in this level

#5000 - 10000
alt_filter_10000 = (df1['Altitude (ft)'] > 5000) & (df1['Altitude (ft)'] <= 10000)
two_inc = df1[alt_filter_10000]
two_inc_avg = two_inc['Altitude (ft)'].mean() # find the average Altitude for this level
two_inc_count = len(two_inc["Aircraft address"].unique()) # find the number of airplanes are in this level

# 10000 - 15000
alt_filter_15000 = (df1['Altitude (ft)'] > 10000) & (df1['Altitude (ft)'] <= 15000)
three_inc = df1[alt_filter_15000]
three_inc_avg = three_inc['Altitude (ft)'].mean() # find the average Altitude for this level
three_inc_count = len(three_inc["Aircraft address"].unique()) # find the number of airplanes are in this level

# 10000 - 15000
alt_filter_15000 = (df1['Altitude (ft)'] > 10000) & (df1['Altitude (ft)'] <= 15000)
three_inc = df1[alt_filter_15000]
three_inc_avg = three_inc['Altitude (ft)'].mean() # find the average Altitude for this level
three_inc_count = len(three_inc["Aircraft address"].unique()) # find the number of airplanes are in this level

# 15000 - 20000
alt_filter_20000 = (df1['Altitude (ft)'] > 15000) & (df1['Altitude (ft)'] <= 20000)
four_inc = df1[alt_filter_20000]
four_inc_avg = four_inc['Altitude (ft)'].mean() 
four_inc_count = len(four_inc["Aircraft address"].unique()) 

# 20000 - 25000
alt_filter_25000 = (df1['Altitude (ft)'] > 20000) & (df1['Altitude (ft)'] <= 25000)
five_inc = df1[alt_filter_25000]
five_inc_avg = five_inc['Altitude (ft)'].mean() 
five_inc_count = len(five_inc["Aircraft address"].unique()) 

# 25000 - 30000
alt_filter_30000 = (df1['Altitude (ft)'] > 25000) & (df1['Altitude (ft)'] <= 30000)
six_inc = df1[alt_filter_30000]
six_inc_avg = six_inc['Altitude (ft)'].mean() 
six_inc_count = len(six_inc["Aircraft address"].unique()) 

# 30000 - 35000
alt_filter_35000 = (df1['Altitude (ft)'] > 30000) & (df1['Altitude (ft)'] <= 35000)
seven_inc = df1[alt_filter_35000]
seven_inc_avg = seven_inc['Altitude (ft)'].mean() 
seven_inc_count = len(seven_inc["Aircraft address"].unique()) 

# 35000 - 40000
alt_filter_40000 = (df1['Altitude (ft)'] > 35000) & (df1['Altitude (ft)'] <= 40000)
eight_inc = df1[alt_filter_40000]
eight_inc_avg = eight_inc['Altitude (ft)'].mean() 
eight_inc_count = len(eight_inc["Aircraft address"].unique()) 

# 40000 - 45000
alt_filter_45000 = (df1['Altitude (ft)'] > 40000) & (df1['Altitude (ft)'] <= 45000)
nine_inc = df1[alt_filter_45000]
nine_inc_avg = nine_inc['Altitude (ft)'].mean() 
nine_inc_count = len(nine_inc["Aircraft address"].unique()) 

# 45000 - 50000
alt_filter_50000 = (df1['Altitude (ft)'] > 45000) & (df1['Altitude (ft)'] <= 50000)
ten_inc = df1[alt_filter_50000]
ten_inc_avg = ten_inc['Altitude (ft)'].mean() 
ten_inc_count = len(ten_inc["Aircraft address"].unique()) 

# 50000 - 55000
alt_filter_55000 = (df1['Altitude (ft)'] > 50000) & (df1['Altitude (ft)'] <= 55000)
elev_inc = df1[alt_filter_55000]
elev_inc_avg = elev_inc['Altitude (ft)'].mean() 
elev_inc_count = len(elev_inc["Aircraft address"].unique()) 

# there is one datapoints in this interval 55000 - 60000 (not useful datapoints because it is probably a weather balloon)

# align the altitude levels and its varibale name
x_atl = [5000,10000,15000, 20000, 25000, 30000,35000,40000,45000,50000,55000]
y_count = [one_inc_count,two_inc_count,three_inc_count,four_inc_count,five_inc_count,six_inc_count,seven_inc_count,eight_inc_count,nine_inc_count,ten_inc_count,elev_inc_count]
y_avg = [one_inc_avg, two_inc_avg, three_inc_avg, four_inc_avg, five_inc_avg, six_inc_avg, seven_inc_avg, eight_inc_avg, nine_inc_avg, ten_inc_avg, elev_inc_count]

# started with basic plots
# draw a scatterplot to outline the correlation between count of flights by altitude level
plt.scatter(x_atl, y_count, label= "count", color= "pink",  
            marker= "*", s=180) 
plt.title("Number of Flights Given the Altitude")
plt.xlabel('Altitude level')
plt.ylabel('Number of Flights')
plt.legend()
plt.show()

# use pie chart to see whats the proportion of flights by levels
plt.pie(y_count, labels = x_atl,  
        startangle=10,  
        radius = 1.3, autopct = '%1.1f%%') 
plt.title("Number of Flights Given the Altitude")
plt.xlabel('Altitude level')
plt.ylabel('Number of Flights')
plt.show()

# to show the a correlation between altitude level and number of flights
plt.plot(x_atl, y_count, label = "Flight Count",color='pink', linestyle='dashed', linewidth = 2,
         marker = "o", markerfacecolor='black', markersize=6)
plt.title("Number of Flights Given the Altitude")
plt.xlabel('Altitude level')
plt.ylabel('Number of Flights')
plt.legend()
plt.show()

# this is to investigate the average altitude in different altitude level
plt.plot(x_atl, y_avg, label = "Altitude Average",color='blue', linestyle='solid', linewidth = 1,
         marker = "o", markerfacecolor='red', markersize=8)
plt.title("Altitude Average By Level")
plt.xlabel('Altitude level')
plt.ylabel('Average Altitude')
plt.legend()
plt.show()

# bargraph to show count, and average altitude (this is a lot more useful in the interactive plot presented later)
plt.bar(x_atl, y_count, y_avg,  color = ['pink', 'blue', 'green', 'yellow', 'red', 'gray','black','orange','white','brown'])
plt.title("Flight Count by Levels")
plt.ylabel('Number of Counts')
plt.xlabel('Average Altitude')
plt.show()

# now move into the interactive plots
# interactive scatterplot
trace = go.Scatter(
    x = x_atl,
    y = y_count,
    mode = 'markers')

data = [trace]
py.iplot(data)

# interaction Barplot
data = [go.Bar(x=x_atl,
            y= y_count)]

py.iplot(data, filename='Flight Count by Levels')

# interactive barplot (shows distribution)
trace1 = go.Pie(labels=x_atl, values=y_count)
py.iplot([trace1], filename='basic_pie_chart')


# see the average altitude by Aircraft Address
df_time = df[['Aircraft address','Time','Altitude (ft)']].dropna()#.groupby('Aircraft address')
df_time_alt = df_time.groupby('Aircraft address')['Altitude (ft)'].apply(list)      
# extract dictioanry key-value pairs
dict_time_alt=dict(df_time_alt)
# put values in a list
list_alt = list(dict_time_alt.values())

new_dic_alt = {}

for key in dict_time_alt:
    new_dic_alt[key] = sum(dict_time_alt[key])/len(dict_time_alt[key])
    
# sort the Aircraft Address by average Altitude
new_dic_alt_ = new_dic_alt
# use imported OrderDict module
new_dic_alt_=OrderedDict(sorted(new_dic_alt_.items(), key=lambda x: x[1]))

# make a barplot to show sorted result in ascending order from left to right
x_address = list(new_dic_alt_.keys())
y_alt2 = list(new_dic_alt_.values())

data1 = [go.Bar(x=x_address, y= y_alt2)]

py.iplot(data1, filename='Average Altitude by Aircraft Address')
